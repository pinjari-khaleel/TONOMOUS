import Mesh from 'mediamonks-webgl/renderer/mesh/Mesh';
import Renderer from 'mediamonks-webgl/renderer/render/Renderer';
import Vector3 from '../../renderer/math/Vector3';

export default class Icosahedron extends Mesh {
  constructor(renderer: Renderer, positionsOnly: boolean = false, storeData: boolean = false) {
    super(renderer);

    if (positionsOnly) {
      this.positionsOnly(storeData);
    } else {
      this.hardNormals(storeData);
    }
  }

  //TODO: make compact
  private hardNormals(storeData: boolean = false) {
    let a = 0.4472000002861023;
    let b = 0.8944000005722046;
    let c = 0.27639999985694885;
    let d = 0.8507000207901001;
    let e = 0.7235999703407288;
    let f = 0.5256999731063843;
    let positionData: Float32Array = new Float32Array([
      0,
      1,
      0,
      b,
      a,
      0,
      c,
      a,
      -d,
      0,
      1,
      0,
      c,
      a,
      -d,
      -e,
      a,
      -f,
      0,
      1,
      0,
      -e,
      a,
      -f,
      -e,
      a,
      f,
      0,
      1,
      0,
      -e,
      a,
      f,
      c,
      a,
      d,
      0,
      1,
      0,
      c,
      a,
      d,
      b,
      a,
      0,
      b,
      a,
      0,
      e,
      -a,
      f,
      e,
      -a,
      -f,
      c,
      a,
      -d,
      e,
      -a,
      -f,
      -c,
      -a,
      -d,
      -e,
      a,
      -f,
      -c,
      -a,
      -d,
      -b,
      -a,
      0,
      -e,
      a,
      f,
      -b,
      -a,
      0,
      -c,
      -a,
      d,
      c,
      a,
      d,
      -c,
      -a,
      d,
      e,
      -a,
      f,
      e,
      -a,
      -f,
      c,
      a,
      -d,
      b,
      a,
      0,
      -c,
      -a,
      -d,
      -e,
      a,
      -f,
      c,
      a,
      -d,
      -b,
      -a,
      0,
      -e,
      a,
      f,
      -e,
      a,
      -f,
      -c,
      -a,
      d,
      c,
      a,
      d,
      -e,
      a,
      f,
      e,
      -a,
      f,
      b,
      a,
      0,
      c,
      a,
      d,
      0,
      -1,
      0,
      -c,
      -a,
      -d,
      e,
      -a,
      -f,
      0,
      -1,
      0,
      -b,
      -a,
      0,
      -c,
      -a,
      -d,
      0,
      -1,
      0,
      -c,
      -a,
      d,
      -b,
      -a,
      0,
      0,
      -1,
      0,
      e,
      -a,
      f,
      -c,
      -a,
      d,
      0,
      -1,
      0,
      e,
      -a,
      -f,
      e,
      -a,
      f,
    ]);
    let normalData: Float32Array = new Float32Array([
      0.491100013256073,
      0.794700026512146,
      -0.35679998993873596,
      0.491100013256073,
      0.794700026512146,
      -0.35679998993873596,
      0.491100013256073,
      0.794700026512146,
      -0.35679998993873596,
      -0.1876000016927719,
      0.794700026512146,
      -0.5774000287055969,
      -0.1876000016927719,
      0.794700026512146,
      -0.5774000287055969,
      -0.1876000016927719,
      0.794700026512146,
      -0.5774000287055969,
      -0.6071000099182129,
      0.794700026512146,
      0,
      -0.6071000099182129,
      0.794700026512146,
      0,
      -0.6071000099182129,
      0.794700026512146,
      0,
      -0.1876000016927719,
      0.794700026512146,
      0.5774000287055969,
      -0.1876000016927719,
      0.794700026512146,
      0.5774000287055969,
      -0.1876000016927719,
      0.794700026512146,
      0.5774000287055969,
      0.491100013256073,
      0.794700026512146,
      0.35679998993873596,
      0.491100013256073,
      0.794700026512146,
      0.35679998993873596,
      0.491100013256073,
      0.794700026512146,
      0.35679998993873596,
      0.982200026512146,
      -0.1876000016927719,
      0,
      0.982200026512146,
      -0.1876000016927719,
      0,
      0.982200026512146,
      -0.1876000016927719,
      0,
      0.3034999966621399,
      -0.1876000016927719,
      -0.9341999888420105,
      0.3034999966621399,
      -0.1876000016927719,
      -0.9341999888420105,
      0.3034999966621399,
      -0.1876000016927719,
      -0.9341999888420105,
      -0.794700026512146,
      -0.1876000016927719,
      -0.5774000287055969,
      -0.794700026512146,
      -0.1876000016927719,
      -0.5774000287055969,
      -0.794700026512146,
      -0.1876000016927719,
      -0.5774000287055969,
      -0.794700026512146,
      -0.1876000016927719,
      0.5774000287055969,
      -0.794700026512146,
      -0.1876000016927719,
      0.5774000287055969,
      -0.794700026512146,
      -0.1876000016927719,
      0.5774000287055969,
      0.3034999966621399,
      -0.1876000016927719,
      0.9341999888420105,
      0.3034999966621399,
      -0.1876000016927719,
      0.9341999888420105,
      0.3034999966621399,
      -0.1876000016927719,
      0.9341999888420105,
      0.794700026512146,
      0.1876000016927719,
      -0.5774000287055969,
      0.794700026512146,
      0.1876000016927719,
      -0.5774000287055969,
      0.794700026512146,
      0.1876000016927719,
      -0.5774000287055969,
      -0.3034999966621399,
      0.1876000016927719,
      -0.9341999888420105,
      -0.3034999966621399,
      0.1876000016927719,
      -0.9341999888420105,
      -0.3034999966621399,
      0.1876000016927719,
      -0.9341999888420105,
      -0.982200026512146,
      0.1876000016927719,
      0,
      -0.982200026512146,
      0.1876000016927719,
      0,
      -0.982200026512146,
      0.1876000016927719,
      0,
      -0.3034999966621399,
      0.1876000016927719,
      0.9341999888420105,
      -0.3034999966621399,
      0.1876000016927719,
      0.9341999888420105,
      -0.3034999966621399,
      0.1876000016927719,
      0.9341999888420105,
      0.794700026512146,
      0.1876000016927719,
      0.5774000287055969,
      0.794700026512146,
      0.1876000016927719,
      0.5774000287055969,
      0.794700026512146,
      0.1876000016927719,
      0.5774000287055969,
      0.1876000016927719,
      -0.794700026512146,
      -0.5774000287055969,
      0.1876000016927719,
      -0.794700026512146,
      -0.5774000287055969,
      0.1876000016927719,
      -0.794700026512146,
      -0.5774000287055969,
      -0.491100013256073,
      -0.794700026512146,
      -0.35679998993873596,
      -0.491100013256073,
      -0.794700026512146,
      -0.35679998993873596,
      -0.491100013256073,
      -0.794700026512146,
      -0.35679998993873596,
      -0.491100013256073,
      -0.794700026512146,
      0.35679998993873596,
      -0.491100013256073,
      -0.794700026512146,
      0.35679998993873596,
      -0.491100013256073,
      -0.794700026512146,
      0.35679998993873596,
      0.1876000016927719,
      -0.794700026512146,
      0.5774000287055969,
      0.1876000016927719,
      -0.794700026512146,
      0.5774000287055969,
      0.1876000016927719,
      -0.794700026512146,
      0.5774000287055969,
      0.6071000099182129,
      -0.794700026512146,
      0,
      0.6071000099182129,
      -0.794700026512146,
      0,
      0.6071000099182129,
      -0.794700026512146,
      0,
    ]);
    let uvData: Float32Array = new Float32Array([
      0.6000000238418579,
      1,
      0.5,
      0.647599995136261,
      0.699999988079071,
      0.647599995136261,
      0.800000011920929,
      1,
      0.699999988079071,
      0.647599995136261,
      0.8999999761581421,
      0.647599995136261,
      0,
      1,
      -0.10000000149011612,
      0.647599995136261,
      0.10000000149011612,
      0.647599995136261,
      0.20000000298023224,
      1,
      0.10000000149011612,
      0.647599995136261,
      0.30000001192092896,
      0.647599995136261,
      0.4000000059604645,
      1,
      0.30000001192092896,
      0.647599995136261,
      0.5,
      0.647599995136261,
      0.5,
      0.647599995136261,
      0.4000000059604645,
      0.352400004863739,
      0.6000000238418579,
      0.352400004863739,
      0.699999988079071,
      0.647599995136261,
      0.6000000238418579,
      0.352400004863739,
      0.800000011920929,
      0.352400004863739,
      -0.10000000149011612,
      0.647599995136261,
      -0.20000000298023224,
      0.352400004863739,
      0,
      0.352400004863739,
      0.10000000149011612,
      0.647599995136261,
      0,
      0.352400004863739,
      0.20000000298023224,
      0.352400004863739,
      0.30000001192092896,
      0.647599995136261,
      0.20000000298023224,
      0.352400004863739,
      0.4000000059604645,
      0.352400004863739,
      0.6000000238418579,
      0.352400004863739,
      0.699999988079071,
      0.647599995136261,
      0.5,
      0.647599995136261,
      0.800000011920929,
      0.352400004863739,
      0.8999999761581421,
      0.647599995136261,
      0.699999988079071,
      0.647599995136261,
      0,
      0.352400004863739,
      0.10000000149011612,
      0.647599995136261,
      -0.10000000149011612,
      0.647599995136261,
      0.20000000298023224,
      0.352400004863739,
      0.30000001192092896,
      0.647599995136261,
      0.10000000149011612,
      0.647599995136261,
      0.4000000059604645,
      0.352400004863739,
      0.5,
      0.647599995136261,
      0.30000001192092896,
      0.647599995136261,
      0.699999988079071,
      0,
      0.800000011920929,
      0.352400004863739,
      0.6000000238418579,
      0.352400004863739,
      -0.10000000149011612,
      0,
      0,
      0.352400004863739,
      -0.20000000298023224,
      0.352400004863739,
      0.10000000149011612,
      0,
      0.20000000298023224,
      0.352400004863739,
      0,
      0.352400004863739,
      0.30000001192092896,
      0,
      0.4000000059604645,
      0.352400004863739,
      0.20000000298023224,
      0.352400004863739,
      0.5,
      0,
      0.6000000238418579,
      0.352400004863739,
      0.4000000059604645,
      0.352400004863739,
    ]);

    this.setPositions(positionData, storeData);
    this.setNormals(normalData, storeData);
    this.setUV0(uvData, storeData);
  }

  private positionsOnly(storeData: boolean = false) {
    let X = 0.525731112119133606;
    let Z = 0.850650808352039932;

    let positions = [];
    positions.push(new Vector3(-X, 0, Z));
    positions.push(new Vector3(X, 0, Z));
    positions.push(new Vector3(-X, 0, -Z));

    positions.push(new Vector3(X, 0, -Z));
    positions.push(new Vector3(0, Z, X));
    positions.push(new Vector3(0, Z, -X));

    positions.push(new Vector3(0, -Z, X));
    positions.push(new Vector3(0, -Z, -X));
    positions.push(new Vector3(Z, X, 0));

    positions.push(new Vector3(-Z, X, 0));
    positions.push(new Vector3(Z, -X, 0));
    positions.push(new Vector3(-Z, -X, 0));

    let positionData: Float32Array = new Float32Array(positions.length * 3);
    // let normalData:Float32Array = new Float32Array(positions.length * 3);
    let ii = 0;
    // let ni = 0;
    for (let i = 0; i < positions.length; i++) {
      positionData[ii++] = positions[i].x;
      positionData[ii++] = positions[i].y;
      positionData[ii++] = positions[i].z;

      /*			positions[i].normalize();
            normalData[ni++] = positions[i].x;
            normalData[ni++] = positions[i].y;
            normalData[ni++] = positions[i].z;*/
    }
    this.setPositions(positionData, storeData);
    // this.setNormals(positionData, storeData);

    let indices = new Uint16Array([
      1,
      4,
      0,
      4,
      9,
      0,
      4,
      5,
      9,
      8,
      5,
      4,
      1,
      8,
      4,
      1,
      10,
      8,
      10,
      3,
      8,
      8,
      3,
      5,
      3,
      2,
      5,
      3,
      7,
      2,
      3,
      10,
      7,
      10,
      6,
      7,
      6,
      11,
      7,
      6,
      0,
      11,
      6,
      1,
      0,
      10,
      1,
      6,
      11,
      0,
      9,
      2,
      11,
      9,
      5,
      2,
      9,
      11,
      2,
      7,
    ]);

    this.setIndices(indices);
  }
}
